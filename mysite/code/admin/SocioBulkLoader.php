<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 30/03/17
 * Time: 1:29 PM
 */
class SocioBulkLoader extends Controller
{

    private static $allowed_actions = array('SocioBulkForm');

    protected $template = "SocioBulkUploadPage";

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $member = Member::currentUser();
        if(!$member) Security::permissionFailure();
    }

    public function Link($action = null)
    {
        return Controller::join_links('SocioBulkLoader', $action);
    }

    public function SocioBulkForm()
    {
        $form = new Form(
            $this,
            'SocioBulkForm',
            new FieldList(
                new FileField('CsvFile', false)
            ),
            new FieldList(
                new FormAction('doUpload', 'Upload')
            ),
            new RequiredFields()
        );
        return $form;
    }

    public function doUpload($data, $form)
    {
        // Delete all records before bulk upload. Records get changed every 10 years or so
        $this->deleteOldData();

        $results = ($_FILES['CsvFile']['tmp_name']);
        $file = fopen($results, r);
        $firstline = fgets($file, 4096); // Gets first record(i.e not being stored in the db as its the column name)
        //Gets the number of fields, in CSV-files the names of the fields are mostly given in the first line
        $num = strlen($firstline) - strlen(str_replace(";", "", $firstline));

        $i = 0;

        //CSV: one line is one record and the cells/fields are separated by ","
        //so $stringRecord is an two dimensional array
        while ($line[$i] = fgets($file, 4096)) {

            $stringRecord[$i] = array();
            $stringRecord[$i] = explode("|", $line[$i], ($num + 1));
            $i++;
        }

        $MainCategory = NULL;//$MainCategory = new SocioEconomicObjectiveCategory();
        $SubCategory = NULL;//$SubCategory = new SocioEconomicObjectiveSubCategory();
        $Code = NULL;//$Code = new SocioEconomicObjectiveCode();
        foreach ($stringRecord as $key => $number) {
            foreach ($number as $k => $content) {
                $myArray = explode('|', $content);
                // Category
                if (!empty($myArray[0])) {
                    $MainCategory = new SocioEconomicObjectiveCategory();
                    $MainCategory->SocioEconomicObjectiveCategory = $myArray[0] . ' ' . $myArray[3];
                    $MainCategory->write();
                }
                // SubCategory
                if (!empty($myArray[1])) {
                    $SubCategory = new SocioEconomicObjectiveSubCategory();
                    $SubCategory->SocioEconomicObjectiveSubCategory = $myArray[1] .' '. $myArray[3];
                    $SubCategory->SocioEconomicObjectiveCategoryID = $MainCategory->ID;
                    $SubCategory->write();
                }
                // Code
                if (!empty($myArray[2])) {
                    $Code = new SocioEconomicObjectiveCode();
                    $Code->SocioEconomicObjectiveCode = $myArray[2] .' '. $myArray[3];
                    $Code->SocioEconomicObjectiveSubCategoryID = $SubCategory->ID;
                    $Code->write();
                }
            }
        }

        return $this->redirectBack();
    }

    public function deleteOldData()
    {
        /*
         * Deleting in lowest dependency order, ie, codes first, then subCat, then mainCat
         */
        $codes = SocioEconomicObjectiveCode::get();
        foreach ($codes as $code) {
            $code->delete();
        }

        $sCategory = SocioEconomicObjectiveSubCategory::get();
        foreach ($sCategory as $cat) {
            $cat->delete();
        }

        $mCategory = SocioEconomicObjectiveCode::get();
        foreach ($mCategory as $cat) {
            $cat->delete();
        }
        return;
    }
}