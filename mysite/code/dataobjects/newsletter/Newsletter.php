<?php
/**
 * Created by PhpStorm.
 * User: admin
 * Date: 31/03/17
 * Time: 12:53 PM
 */
class Newsletter extends DataObject
{

    // mailchimp acc->user heathdunlop pass->RealSamdog11!
    private static $db = array(
        'Title' => 'Varchar(13)',
        'Subtitle'  =>  'Varchar(120)',
        'MailingList' => 'Varchar(100)',
        'TemplateID' => 'Int(100)',
        'subject_line' => 'Varchar(100)',
        'from_name' => 'Varchar(100)',
        'reply_to' => 'Varchar(100)',
        'MailChimpNewsletterID' => 'Varchar(100)',
        'MainLetterBlock' => 'Text',
        'SecondLetterBlock' => 'Text',
        'ThirdLetterBlock' => 'Text',
    );

    private static $has_many = array(
        'LetterCategories'  =>  'LetterCategory'
    );

    public function TheDomain()
    {
        $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://";
        $domainName = $_SERVER['HTTP_HOST'].'/';
        $THEHOST = $protocol.$domainName;
        return $THEHOST;
    }


    public function getCMSFields()
    {
        $fields = parent::getCMSFields();

        $mailingList = DropdownField::create(
            'MailingList',
            'MailingList',
            $this->getMailChimpLists()
        );

        $templateID = DropdownField::create(
            'TemplateID',
            'TemplateID',
            $this->getMailChimpTemplates()
        );

        $subjectLine = TextField::create('subject_line', 'Subject Line')
            ->setDescription('Newsletter subject');
        $fromName = TextField::create('from_name', 'From Name')
            ->setDescription('The \'from\' name of the campaign(not an email address)');
        $replyTo = TextField::create('reply_to', 'Reply to')
            ->setDescription('The reply to email address of the campaign/newsletter');
        $mainLetterBlock = TreeDropdownField::create('MainLetterBlock', 'Main Content for newsletter', 'SiteTree')
            ->setDescription('for de-selecting <strong>Choose page again</strong>');
        $secondLetterBlock = TreeDropdownField::create('SecondLetterBlock', 'Main Content for newsletter', 'SiteTree')
            ->setDescription('for de-selecting <strong>Choose page again</strong>');
        $thirdLetterBlock = TreeDropdownField::create('ThirdLetterBlock', 'Main Content for newsletter', 'SiteTree')
            ->setDescription('for de-selecting <strong>Choose page again</strong>');
        $newsLetterID = ReadonlyField::create('MailChimpNewsletterID', 'Id for the newsletter/campaign')
            ->setDescription('Will automatically create one when you save the newsletter');

        $fields->addFieldsToTab('Root.Main', array(
            $mailingList,
            $templateID,
            $subjectLine,
            $fromName,
            $replyTo,
            $mainLetterBlock,
            $secondLetterBlock,
            $thirdLetterBlock,
            $newsLetterID
        ));

        $gfConfig = GridFieldConfig_RelationEditor::create();
        $categoryList = $this->LetterCategories();
        $categoryField = new GridField('LetterCategories', null, $categoryList, $gfConfig);

        $fields->addFieldsToTab('Root.LetterCategories', array(
            $categoryField
        ));



        return $fields; // TODO: Change the autogenerated stub
    }

    public function onBeforeWrite()
    {
        parent::onBeforeWrite(); // TODO: Change the autogenerated stub

        if ($this->MailChimpNewsletterID != null || !empty($this->MailChimpNewsletterID)) {
            $newsletterID = $this->MailChimpNewsletterID;
        } else {
            $newsletterID = $this->createMailChimpCampaign();
            $this->MailChimpNewsletterID = $newsletterID;
        };
        $templateID = $this->TemplateID;
        $this->setMailChimpTemplate($newsletterID, $templateID);

        $this->BuildNewsletterContent();
    }

    public function getAllPages()
    {
        //TODO: unsure why the id is coming through for the title
        $PageArray = array();
        $pages = Page::get();
        foreach ($pages as $p) {
            $PageArray[$p->ID]  =   $p->Title;
        }
        return $PageArray;
    }

    /*
     * base MailChimp API call
     */
    public function ChimpService()
    {
        $chimpService = new RestfulService('https://us4.api.mailchimp.com/3.0/');
        $chimpService->httpHeader('Authorization: apikey aec1aaaf3d113585538ca63cf101801c-us4');
        return $chimpService;
    }

    /*
     * Get MailChimp Mailing Lists
     */
    public function getMailChimpLists()
    {
        $service = $this->ChimpService();
        $endpoint = 'lists';
        $response = $service->request($endpoint, 'GET');

        $body = $response->getBody();
        $jObject = json_decode($body);

        $ListArray = array();
        foreach ($jObject->lists as $l) {
            $listObject = new DataObject();
            $listObject->id = $l->id;
            $listObject->name = $l->name;
            $ListArray[$listObject->id] = $listObject->name;
        }

        return $ListArray;
    }

    public function getMailChimpTemplates()
    {
        $TemplateArr = array();

        $service = $this->ChimpService();
        //$endpoint = 'templates?folder_id=73649e8476';
        //$endpoint = 'templates?type=user';
        //$endpoint = 'templates?folder_id=73649e8476';
        $endpoint = 'templates/?created_by=Heath Dunlop';
        //$endpoint = "templates";
        $response = $service->request($endpoint, 'GET');
        $body = $response->getBody();
        $jsonObj = json_decode($body);

        foreach ($jsonObj->templates as $o) {
            $obj = new DataObject();
            $obj->id = $o->id;
            $obj->name = $o->name;
            $TemplateArr[$obj->id] = $obj->name;
        }
        return $TemplateArr;
    }

    /*
     * Step 2 {create MailChimp campaign/newsletter for MailingList and details selected in data model}
     * create MailChimp campaign/newsletter
     * newsletter is created from MailingList DropDown created from getMailChimpLists()
     */
    public function createMailChimpCampaign()
    {
        $service = $this->ChimpService();
        $endpoint = 'campaigns';
        $obj = new stdClass();
        $obj->type = 'regular'; // type of campaign (regular,plaintext,absplit,rss,variate)
        $obj->recipients->list_id = $this->MailingList; //the unique list id
        $obj->settings->subject_line = $this->subject_line;
        $obj->settings->title = $this->Title;
        $obj->settings->from_name = $this->from_name; //The 'from' name of the campaign(not an email address)
        $obj->settings->reply_to = $this->reply_to;//The reply to email address of the campaign
        $obj->settings->inline_css = FALSE;
        $obj->content_type = 'template';

        $jObject = json_encode($obj);
        $response = $service->request($endpoint, 'POST', $jObject); // Newsletter is created at this point, we need response for its id to add content
        $body = $response->getBody();
        $jObject = json_decode($body);
        $newsLetterID = $jObject->id;
        return $newsLetterID;
    }
    /**
     * @param $campaignID
     * @param $templateID
     * PUT request to set newsletter/campaign template
     * also update the content for template
     */
    public function setMailChimpTemplate($campaignID, $templateID)
    {
        $host = $this->TheDomain();
        $idForTemplate = intval($templateID);

        $service = $this->ChimpService();
        $endpoint = 'campaigns/' . $campaignID . '/content';
        $obj = new stdClass();
        $obj->template->id = $idForTemplate;

        // Where to inject content
        $data = $this->BuildNewsletterContent();

        $categories = $data->ExtraLinks;
        $catHTML = '';
        foreach ($categories as $c){
            $catHTML .= '<h1 style="text-align: center;">'.$c->CatTitle.'</h1><ul style="list-style-type:disc; padding:0;">';
            $links = $c->CatLinks;
            foreach($links as $link)
            {
                $page = Page::get()->byID($link->Link);
                $catHTML .= '<li style="text-align: center; padding: 8px 0; color: #FFF;"><a href="'.$host.$page->URLSegment.'" style="color:#FFF">'.$page->Title.'</a></li>';
            }
            $catHTML .= '</ul>';
        }

        $obj->template->sections->template_title = $this->Title;
        $obj->template->sections->template_subtitle = $this->Subtitle;

        $obj->template->sections->content_9 = $data->MainSection->ImageURL;
        $obj->template->sections->main_title = $data->MainSection->Title;
        $mainContent360 =  substr($data->MainSection->Content, 0, 360);
        $obj->template->sections->main_content = $mainContent360;
        $obj->template->sections->main_link = '<a style="background-color:white; color:#212020; padding-top:10px; padding-bottom:10px; padding-left:20px; padding-right:20px; border-radius:5px; text-decoration:none;" href="'.$host .''. $data->MainSection->SiteURL.'">Website link</a>';

        //<a style="background-color:grey; color:#212020; padding-top:10px; padding-bottom:10px; padding-left:20px; padding-right:20px; border-radius:5px; text-decoration:none;" href="/">Website link</a>
        // Second content
        $obj->template->sections->second_image = $data->SecondSection->ImageURL;
        $obj->template->sections->second_title = $data->SecondSection->Title;
        $secondContent180 =  substr($data->SecondSection->Content, 0, 180);
        $obj->template->sections->second_content = $secondContent180;
        $obj->template->sections->second_link = '<a style="background-color:white; color:#212020; padding-top:10px; padding-bottom:10px; padding-left:20px; padding-right:20px; border-radius:5px; text-decoration:none;" href="'.$host .''. $data->SecondSection->SiteURL.'">Website link</a>';
        // Third content
        $obj->template->sections->third_image = $data->ThirdSection->ImageURL;
        $obj->template->sections->third_title = $data->ThirdSection->Title;
        $thirdContent180 =  substr($data->ThirdSection->Content, 0, 180);
        $obj->template->sections->third_content = $thirdContent180;
        $obj->template->sections->third_link = '<a style="background-color:white; color:#212020; padding-top:10px; padding-bottom:10px; padding-left:20px; padding-right:20px; border-radius:5px; text-decoration:none;" href="'.$host .''. $data->ThirdSection->SiteURL.'">Website link</a>';
        // Extra links
        $obj->template->sections->extra_links = $catHTML;

        $jObject = json_encode($obj);
        $service->request($endpoint, 'PUT', $jObject);
    }

    /*
     * Can use this to get default content for template
     */
    public function getTemplateDefaultContent($templateID)
    {
        $service = $this->ChimpService();
        $endpoint = '/templates/' . $templateID . '/default-content';
        $service->request($endpoint, 'GET');
    }

    public function BuildNewsletterContent()
    {
        $host = $this->TheDomain();

        $main = Page::get()->byID($this->MainLetterBlock);
        $second = Page::get()->byID($this->SecondLetterBlock);
        $third = Page::get()->byID($this->ThirdLetterBlock);

        $mainContent = NULL;
        $secondContent = NULL;
        $thirdContent = NULL;
        // Page contents
        if(!empty($main->Intro) && !empty($main->Content)){
            $mainContent = $main->Intro . $main->Content;
        } elseif(!empty($main->Content)){
            $mainContent = $main->Content;
        } elseif (!empty($main->Intro)){
            $mainContent = $main->Intro;
        } elseif (!empty($main->Blurb)){
            $mainContent = $main->Blurb;
        } else {
            $mainContent = 'No Blurb, Intro, or Content set';
        }

        if(!empty($second->Intro) && !empty($second->Content)){
            $secondContent = $second->Intro . $second->Content;
        } elseif(!empty($second->Content)){
            $secondContent = $second->Content;
        } elseif (!empty($second->Intro)){
            $secondContent = $second->Intro;
        } elseif (!empty($second->Blurb)){
            $secondContent = $second->Blurb;
        } else {
            $secondContent = 'No Blurb, Intro, or Content set';
        }

        if(!empty($third->Intro) && !empty($third->Content)){
            $thirdContent = $third->Intro . $third->Content;
        } elseif(!empty($third->Content)){
            $thirdContent = $third->Content;
        } elseif (!empty($third->Intro)){
            $thirdContent = $third->Intro;
        } elseif (!empty($third->Blurb)){
            $thirdContent = $third->Blurb;
        } else {
            $thirdContent = 'No Blurb, Intro, or Content set';
        }

        $mainImage = $main->HeroImage()->FileName;
        $buildMainImage = '<img style="max-width:600px;" src="'.$host.'/' . $mainImage . '">';
        $secondImage = $second->HeroImage()->FileName;
        $buildSecondImage = '<img width="295px" height="150px" style="max-width:295px;" src="'.$host.'/' . $secondImage . '">';
//        $thirdImage = $this->buildMailChimpImage($third->HeroImage()->FileName);
//        $buildThirdImage = '<img width="295px" height="150px" style="max-width:295px;" src="data:image/jpeg;base64,' . $thirdImage . '">';
        //$thirdImage = $this->buildMailChimpImage($third->HeroImage()->FileName);
        $thirdImage = $third->HeroImage()->FileName;
        $buildThirdImage = '<img width="295px" height="150px" style="max-width:295px;" src="'.$host.'/' . $thirdImage . '">';

        $categories = $this->LetterCategories();

        $categoriesArr = ArrayList::create();

        foreach ($categories as $cat)
        {
            $category = DataObject::create();
            $category->CatTitle = $cat->Title;
            $category->CatLinks = $cat->Letterlinks();
            $categoriesArr->add($category);
        }

        $MainData = ArrayData::create(array(
            'Title' => $main->Title,
            'Content' => strip_tags($mainContent),
            'ImageURL' => $buildMainImage,
            'SiteURL'   =>  $main->URLSegment
        ));

        $SecondData = ArrayData::create(array(
            'Title' => $second->Title,
            'Content' => strip_tags($secondContent),
            'ImageURL' => $buildSecondImage,
            'SiteURL'   =>  $second->URLSegment
        ));

        $ThirdData = ArrayData::create(array(
            'Title' => $third->Title,
            'Content' => strip_tags($thirdContent),
            'ImageURL' => $buildThirdImage,
            'SiteURL'   =>  $third->URLSegment
        ));

        $data = ArrayData::create(array(
            'MainSection' => $MainData,
            'SecondSection' => $SecondData,
            'ThirdSection' => $ThirdData,
            'ExtraLinks' => $categoriesArr,
        ));

        return $data;
    }

    /*
     * Return 64 bit Image
     * ToDo: maybe just send it as src from server
     */
    public function buildMailChimpImage($pathname)
    {
        //$baseURL = $_SERVER['SERVER_NAME'];
        $host = $this->TheDomain();

        //$url = 'http://'.$baseURL.'/';
        $b64image = base64_encode(file_get_contents($host .= $pathname));
        return $b64image;
    }

}